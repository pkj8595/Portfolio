1. 게임 제작에 있어서 관심분야
ㄴ AI 프로그래밍, 엔진, 쉐이더, 클라이언트, 프로그래머 

2. C/C++차이 
ㄴ 객체지향 절차지향, 클래스 

3. 굳이 C++을 사용하고 공부해야 하는지?
ㄴ 포인터를 쓸 수 있는 객체지향언어가 c++이라서....X
ㄴ C언어의 특징을 대부분 포함하고 있으며 oop의 특징을 가지고 있기 때문에?
ㄴ 기능이 많기 때문에?

4. 오버로딩 + 오버라이딩 개념 및 설명 
ㄴ 오버로딩 >> 함수의 이름은 같지만 매개변수나 리턴 타입이 다른 형의 함수를 선언하는 것 
ㄴ 오버 라이딩 >> 함수의 재정의! 자식클래스에서 기반클래스의 함수를 재정의 하는것. 기반 클래스의 함수가 virture 키워드를 가지고 있다면 업캐스팅을 하여 사용할 수 있음.
ㄴ c++에서는 맹글링 때문에 가능하지만 C에서는 맹글링이 없기때문에 오버로딩이나 오버라이딩이 불가능함.

5. stack 과 Heap의 차이 및 설명 
ㄴ 메모리 힙 >> 동적 할당할때 위치
ㄴ 스택 >> 함수나 변수들이 쌓인다...? 
	
5-1.메모리 힙, 자료구조 힙의 차이
ㄴ

6. 전역, 지역, 동적 변수들 변수의 lifeCycle설명
ㄴ	라이프라이클 변수의 생명주기 
	allocate -> release-> memory pool
	변수가 선언되면 메모리에 할당 >>aloocate
	스코프에서 벗어나면 release
	사용후 메모리를 해제하면 memory pool에 반환

	
ㄴ 전역 : 컴파일 타임에 할당이 되며 DATA영역에 저장된다. 프로그램이 끝날때 해제된다.
ㄴ 지역 : 스코프 {} 안에서 할당된 변수를 지역변수라고 하는데 스코프가 끝나면 해제된다. stack 영역에 들어간다. 
ㄴ 동적 변수 : heap 영역에 할당되며 사용자가 직접 해제하기 전에는 해제가 되지 않는다. C++에서는 new 키워드 C에서는 malloc으로 메모리를 할당할 수 있다.
	### new 에 의해서 생성된 객체는 delete를 만날 때에만 소멸

>>delete 와 nullptr의 차이가 ? 
	delete >> 메모리 영역을 해제 
	nullptr은 nullptr 


7. Struct /Class 
ㄴ 접근지정자 차이가 있습니다. public private

8. New / Malloc 개념 및 차이점 
ㄴ new : 메모리의 확보와 객체의 생성이 한번에 이뤄진다.
ㄴ Malloc : 매개변수로 등록된 자료형의 byte크기 만큼 메모리를 확보한다. 

@@ 9. C++ / C# 차이점 
ㄴ C++ >> C의 거의 모든 기능을 지원함
ㄴ C# >> - 가비지 컬렉터가 있음.
		 - 가상머신 위에서 돌아가기 때문에 어떤 장치라 하더라도 프로그램이 돌아갈 수 있음.
		 - 동적할당과 정적할당이 구분되어 있지 않음.
		 - 전역 함수,변수가 없음. >> 모든 멤버는 클래스에 속함
		 - 기본 자료형이 구조체의 별칭 >> 그렇기에 타입 변환을 하기 위해선 내장되어 있는 함수를 사용해야함


10. 포인터란 무엇인가? (call by value, call by refenence)
ㄴ 주소값을 저장하는 변수

11. 포인터와 참조자 차이점 
ㄴ 참조자의 경우 null값이 들어가면 오류를 발생시킨다.

12. GetMessage / PeekMessage 차이점 
ㄴ getMessage : 대기하다가 메세지가 발생하면 실행 
ㄴ peekMessage : 메세지가 발생되지 않더라도 실행

13. CallBack Function 개념 및 설명 
ㄴ 

14. C++ / C#  메모리 차이점 
ㄴ C#에서는 가비지 컬렉터가 heap영역을 주기적으로 청소한다.

15.메모리의 구조에 대한 설명 
ㄴ 메모리의 4대 영역 

Stack
	지역 변수, 
	매개 변수 저장, 
	함수 저장,
	컴파일 시점에 크기 할당하는 정적 할당을 사용 
	스코프가 끝나면 메모리에서 해제된다.

Heap 
	사용자 관리 영역,
	사용자 정의에 의해 할당된 메모리에 저장하거나 해제하는 동적 할당을 사용 

Data 
	전역 변수,
	static 변수,
	프로그램이 종료될 때까지 지워지지 않고 컴파일 시점에 크기 할당 

Code 
	소스 코드
	기계어로 제어되는 메모리 영역


16. 소멸자에 virtual를 쓰는 이유
ㄴ 상속을 받는 가상 소멸자를 쓰지 않을 경우 기반 클래스의 소멸자가 호출되지 않는다.

	타일 속성	box콜라이더		픽셀		픽셀
17. 스타듀 밸리, 할로우 나이트, 마리오, 메가맨을 해봤는지?
해봤다면 이와 비슷한 장르의 게임 충돌처리는 어떻게 할지 본인의 생각을 애기하시오.
ㄴ3가지의 장단점
ㄴ타일속성		: 
ㄴbox 콜라이더	:	계산이 빠르지만 정확한 충돌처리가 어렵다. 
ㄴ픽셀			:	섬세한 충돌 처리가 가능하다. 
					더 많은 메모리를 사용 
					동적으로 로드 언로드를 하기위해 구현이 필요

//폰노이만 아키텍처 (병목현상이 일어....나)


h 인쿨루드  >> 전처리 단계 
cpp인클루드 >> 컴파일 단계

18.코딩테스트 : 문자열 관련 
<주의사항>
C++언어로 풀어야하고 아래의 ㅎ마수의 내용을 알맞게 채워넣으세요 
라이브러리을 사용하면 안됩니다.

입력값 : "hello world this is Pearl Abyss"
반환값 : "Pearl Abyss is this world hello "
<조건>
입력 문자열은 앞뒤에 공백이 없다고 가정합니다.
모든 단어는 공백 한칸으로 구분된다고 가정합니다.
void reverseWords(char* output, int outputArraySize, const char* input)
{
	output

}